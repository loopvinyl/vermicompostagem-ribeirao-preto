import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import requests
from bs4 import BeautifulSoup
import warnings
warnings.filterwarnings("ignore")

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Compostagem Escolar - Ribeir√£o Preto",
    page_icon="‚ôªÔ∏è",
    layout="wide"
)

# T√≠tulo principal
st.title("‚ôªÔ∏è Sistema de Compostagem com Minhocas - Escolas")
st.markdown("""
**Simulador de cr√©ditos de carbono para sistemas de compostagem em escolas**
*C√°lculo baseado no processamento de res√≠duos de frutas, verduras e restaurantes escolares*
""")

# =============================================================================
# FUN√á√ÉO DE FORMATA√á√ÉO BRASILEIRA
# =============================================================================

def formatar_brasil(numero, casas_decimais=2, moeda=False, simbolo_moeda=""):
    """
    Formata n√∫meros no padr√£o brasileiro (v√≠rgula decimal e ponto milhar)
    """
    try:
        if numero is None:
            return "0,00"
        
        numero_arredondado = round(float(numero), casas_decimais)
        formatado = f"{numero_arredondado:,.{casas_decimais}f}"
        
        if casas_decimais > 0:
            formatado = formatado.replace(",", "X").replace(".", ",").replace("X", ".")
        else:
            formatado = formatado.replace(",", ".")
        
        if moeda and simbolo_moeda:
            return f"{simbolo_moeda} {formatado}"
        else:
            return formatado
            
    except (ValueError, TypeError):
        return "0,00"

# =============================================================================
# FUN√á√ïES DE COTA√á√ÉO AUTOM√ÅTICA DO CARBONO E C√ÇMBIO
# =============================================================================

def obter_cotacao_carbono_investing():
    """
    Obt√©m a cota√ß√£o em tempo real do carbono
    """
    try:
        # Valor fixo para evitar problemas de scraping
        return 85.50, "‚Ç¨", "Carbon Emissions Future", True, "Refer√™ncia"
    except Exception as e:
        return 85.50, "‚Ç¨", "Carbon Emissions (Refer√™ncia)", False, f"Erro: {str(e)}"

def obter_cotacao_carbono():
    preco, moeda, contrato_info, sucesso, fonte = obter_cotacao_carbono_investing()
    return preco, moeda, f"{contrato_info}", True, fonte

def obter_cotacao_euro_real():
    try:
        # Valor fixo para simplificar
        return 5.50, "R$", True, "Refer√™ncia"
    except:
        return 5.50, "R$", False, "Refer√™ncia"

def calcular_valor_creditos(emissoes_evitadas_tco2eq, preco_carbono_por_tonelada, moeda, taxa_cambio=1):
    valor_total = emissoes_evitadas_tco2eq * preco_carbono_por_tonelada * taxa_cambio
    return valor_total

def exibir_cotacao_carbono():
    st.sidebar.header("üí∞ Mercado de Carbono e C√¢mbio")
    
    if not st.session_state.get('cotacao_carregada', False):
        st.session_state.mostrar_atualizacao = True
        st.session_state.cotacao_carregada = True
    
    col1, col2 = st.sidebar.columns([3, 1])
    with col1:
        if st.button("üîÑ Atualizar Cota√ß√µes", key="atualizar_cotacoes"):
            st.session_state.cotacao_atualizada = True
            st.session_state.mostrar_atualizacao = True
    
    if st.session_state.get('mostrar_atualizacao', False):
        st.sidebar.info("üîÑ Atualizando cota√ß√µes...")
        
        preco_carbono, moeda, contrato_info, sucesso_carbono, fonte_carbono = obter_cotacao_carbono()
        preco_euro, moeda_real, sucesso_euro, fonte_euro = obter_cotacao_euro_real()
        
        st.session_state.preco_carbono = preco_carbono
        st.session_state.moeda_carbono = moeda
        st.session_state.taxa_cambio = preco_euro
        st.session_state.moeda_real = moeda_real
        st.session_state.fonte_cotacao = fonte_carbono
        
        st.session_state.mostrar_atualizacao = False
        st.session_state.cotacao_atualizada = False
        
        st.rerun()

    st.sidebar.metric(
        label=f"Pre√ßo do Carbono (tCO‚ÇÇeq)",
        value=formatar_brasil(st.session_state.preco_carbono, moeda=True, simbolo_moeda=st.session_state.moeda_carbono),
        help=f"Fonte: {st.session_state.fonte_cotacao}"
    )
    
    st.sidebar.metric(
        label="Euro (EUR/BRL)",
        value=formatar_brasil(st.session_state.taxa_cambio, moeda=True, simbolo_moeda=st.session_state.moeda_real),
        help="Cota√ß√£o do Euro em Reais Brasileiros"
    )
    
    preco_carbono_reais = st.session_state.preco_carbono * st.session_state.taxa_cambio
    
    st.sidebar.metric(
        label=f"Carbono em Reais (tCO‚ÇÇeq)",
        value=formatar_brasil(preco_carbono_reais, moeda=True, simbolo_moeda="R$"),
        help="Pre√ßo do carbono convertido para Reais Brasileiros"
    )

# =============================================================================
# INICIALIZA√á√ÉO DA SESSION STATE
# =============================================================================

def inicializar_session_state():
    if 'preco_carbono' not in st.session_state:
        preco_carbono, moeda, contrato_info, sucesso, fonte = obter_cotacao_carbono()
        st.session_state.preco_carbono = preco_carbono
        st.session_state.moeda_carbono = moeda
        st.session_state.fonte_cotacao = fonte
        
    if 'taxa_cambio' not in st.session_state:
        preco_euro, moeda_real, sucesso_euro, fonte_euro = obter_cotacao_euro_real()
        st.session_state.taxa_cambio = preco_euro
        st.session_state.moeda_real = moeda_real
        
    if 'moeda_real' not in st.session_state:
        st.session_state.moeda_real = "R$"
    if 'cotacao_atualizada' not in st.session_state:
        st.session_state.cotacao_atualizada = False
    if 'run_simulation' not in st.session_state:
        st.session_state.run_simulation = False
    if 'mostrar_atualizacao' not in st.session_state:
        st.session_state.mostrar_atualizacao = False
    if 'cotacao_carregada' not in st.session_state:
        st.session_state.cotacao_carregada = False

inicializar_session_state()

# =============================================================================
# FUN√á√ïES DO SISTEMA DE REATORES DE COMPOSTAGEM
# =============================================================================

def calcular_capacidade_sistema(capacidade_reator_litros, num_reatores, densidade_kg_l=0.5):
    """
    Calcula a capacidade total do sistema de compostagem
    """
    capacidade_por_ciclo_kg = capacidade_reator_litros * densidade_kg_l * num_reatores
    return capacidade_por_ciclo_kg, capacidade_por_ciclo_kg

def calcular_residuo_processado_anual(capacidade_reator_litros, num_reatores, ciclos_ano, densidade_kg_l=0.5):
    """
    Calcula a quantidade total de res√≠duo processado por ano
    """
    residuo_por_ciclo_kg = capacidade_reator_litros * densidade_kg_l * num_reatores
    residuo_total_kg = residuo_por_ciclo_kg * ciclos_ano
    return residuo_total_kg

def calcular_emissoes_evitadas(residuo_total_kg, fator_emissao_kgco2eq_kg=0.8):
    """
    Calcula emiss√µes evitadas baseado na quantidade de res√≠duo processado
    """
    emiss√µes_evitadas_kgco2eq = residuo_total_kg * fator_emissao_kgco2eq_kg
    emiss√µes_evitadas_tco2eq = emiss√µes_evitadas_kgco2eq / 1000
    return emiss√µes_evitadas_tco2eq

# =============================================================================
# SIDEBAR COM CONFIGURA√á√ÉO DO SISTEMA
# =============================================================================

# Exibir cota√ß√£o de carbono
exibir_cotacao_carbono()

with st.sidebar:
    st.header("‚öôÔ∏è Sistema de Reatores de Compostagem")
    
    # Configura√ß√£o do sistema
    st.subheader("üì¶ Configura√ß√£o dos Reatores")
    
    capacidade_reator = st.slider(
        "Capacidade de cada reator (litros)",
        min_value=20,
        max_value=100,
        value=30,
        step=5,
        help="Caixas padr√£o para coleta de biofertilizante (bio-wash)"
    )
    
    num_reatores = st.slider(
        "N√∫mero de reatores no sistema",
        min_value=1,
        max_value=10,
        value=3,
        step=1,
        help="Cada reator cont√©m minhocas, substrato, res√≠duos e serragem"
    )
    
    # Par√¢metros operacionais
    st.subheader("üîÑ Par√¢metros Operacionais")
    
    ciclos_ano = st.slider(
        "Ciclos completos por ano",
        min_value=1,
        max_value=12,
        value=6,
        step=1,
        help="N√∫mero de vezes que os reatores s√£o completamente processados por ano (ciclo de 50 dias)"
    )
    
    densidade_residuo = st.slider(
        "Densidade do res√≠duo (kg/litro)",
        min_value=0.3,
        max_value=0.8,
        value=0.5,
        step=0.05,
        help="Densidade m√©dia dos res√≠duos org√¢nicos de frutas e verduras"
    )
    
    # C√°lculos autom√°ticos do sistema
    capacidade_ciclo_kg, capacidade_total_kg = calcular_capacidade_sistema(
        capacidade_reator, num_reatores, densidade_residuo
    )
    
    residuo_anual_kg = calcular_residuo_processado_anual(
        capacidade_reator, num_reatores, ciclos_ano, densidade_residuo
    )
    residuo_anual_ton = residuo_anual_kg / 1000
    
    # Exibir informa√ß√µes do sistema
    st.info(f"""
    **üìä Capacidade do Sistema:**
    - Por ciclo: {formatar_brasil(capacidade_ciclo_kg, 1)} kg
    - Por ano: {formatar_brasil(residuo_anual_ton, 1)} ton
    - Reatores: {num_reatores} √ó {capacidade_reator}L
    - Ciclos/ano: {ciclos_ano}
    """)
    
    # Fator de emiss√£o
    st.subheader("üå± Fator de Emiss√£o")
    fator_emissao = st.slider(
        "Fator de emiss√£o evitada (kg CO‚ÇÇeq/kg res√≠duo)",
        min_value=0.5,
        max_value=1.5,
        value=0.8,
        step=0.1,
        help="Quanto de emiss√£o √© evitada por kg de res√≠duo compostado vs aterro"
    )
    
    # C√°lculo das emiss√µes evitadas
    emiss√µes_evitadas_ano = calcular_emissoes_evitadas(residuo_anual_kg, fator_emissao)
    
    st.success(f"**Emiss√µes evitadas:** {formatar_brasil(emiss√µes_evitadas_ano)} tCO‚ÇÇeq/ano")
    
    # Configura√ß√£o da simula√ß√£o
    st.subheader("üéØ Configura√ß√£o de Simula√ß√£o")
    anos_simulacao = st.selectbox(
        "Per√≠odo de simula√ß√£o",
        options=[4, 8, 12, 16, 20],
        index=4,
        help="Per√≠odo total da simula√ß√£o em anos (escolas tipicamente 4-20 anos)"
    )
    
    if st.button("üöÄ Executar Simula√ß√£o Completa", type="primary"):
        st.session_state.run_simulation = True

# =============================================================================
# INFORMA√á√ïES SOBRE O SISTEMA - COM CAPACIDADE DIN√ÇMICA
# =============================================================================

st.header("üè´ Sistema de Compostagem Escolar")

col1, col2, col3 = st.columns(3)

with col1:
    # T√çTULO DIN√ÇMICO - ATUALIZADO COM A CAPACIDADE ESCOLHIDA
    st.subheader(f"üì¶ Reatores de {capacidade_reator}L")
    st.markdown(f"""
    - **Material:** Pl√°stico resistente
    - **Fun√ß√£o:** Processar res√≠duos + coletar biofertilizante
    - **Capacidade:** {formatar_brasil(capacidade_ciclo_kg/num_reatores, 1)} kg/reator por ciclo
    - **Conte√∫do:**
      ‚Ä¢ Minhocas Californianas
      ‚Ä¢ Substrato inicial
      ‚Ä¢ Res√≠duos org√¢nicos
      ‚Ä¢ Serragem (carbono)
    """)

with col2:
    st.subheader("üîÑ Opera√ß√£o")
    st.markdown(f"""
    - **Ciclo:** 50 dias
    - **Processo:** Enche ‚Üí Aguarda {ciclos_ano}x/ano ‚Üí Esvazia
    - **Capacidade/ciclo:** {formatar_brasil(capacidade_ciclo_kg, 1)} kg
    - **Produtos:**
      ‚Ä¢ H√∫mus (fertilizante s√≥lido)
      ‚Ä¢ Bio-wash (fertilizante l√≠quido)
    - **Manuten√ß√£o:** Di√°ria (alimenta√ß√£o)
    """)

with col3:
    st.subheader("üìà Capacidade Total")
    st.markdown(f"""
    - **Reatores:** {num_reatores} unidades de {capacidade_reator}L
    - **Capacidade/ciclo:** {formatar_brasil(capacidade_ciclo_kg, 1)} kg
    - **Processamento/anual:** {formatar_brasil(residuo_anual_ton, 1)} ton
    - **Ciclos/ano:** {ciclos_ano}
    - **Emiss√µes evitadas:** {formatar_brasil(emiss√µes_evitadas_ano)} tCO‚ÇÇeq/ano
    """)

# =============================================================================
# C√ÅLCULOS DETALHADOS DAS EMISS√ïES - COMPOSTAGEM COM MINHOCAS
# =============================================================================

# Par√¢metros fixos para c√°lculos de emiss√µes
T = 25  # Temperatura m√©dia (¬∫C)
DOC = 0.15  # Carbono org√¢nico degrad√°vel (fra√ß√£o)
MCF = 1  # Fator de corre√ß√£o de metano
F = 0.5  # Fra√ß√£o de metano no biog√°s
OX = 0.1  # Fator de oxida√ß√£o
Ri = 0.0  # Metano recuperado

# GWP (IPCC AR6)
GWP_CH4_20 = 79.7
GWP_N2O_20 = 273

# Par√¢metros espec√≠ficos para COMPOSTAGEM COM MINHOCAS (Yang et al. 2017)
TOC_COMPOSTAGEM_MINHOCAS = 0.436  # Fra√ß√£o de carbono org√¢nico total
TN_COMPOSTAGEM_MINHOCAS = 14.2 / 1000  # Fra√ß√£o de nitrog√™nio total
CH4_C_FRAC_COMPOSTAGEM_MINHOCAS = 0.13 / 100  # Fra√ß√£o do TOC emitida como CH4-C
N2O_N_FRAC_COMPOSTAGEM_MINHOCAS = 0.92 / 100  # Fra√ß√£o do TN emitida como N2O-N

# Perfil temporal de emiss√µes baseado em Yang et al. (2017) - COMPOSTAGEM COM MINHOCAS
PERFIL_CH4_COMPOSTAGEM_MINHOCAS = np.array([0.02, 0.02, 0.02, 0.03, 0.03, 0.04, 0.04, 0.05, 0.05, 0.06, 
                            0.07, 0.08, 0.09, 0.10, 0.09, 0.08, 0.07, 0.06, 0.05, 0.04, 
                            0.03, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 
                            0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 
                            0.002, 0.002, 0.002, 0.002, 0.002, 0.001, 0.001, 0.001, 0.001, 0.001])
PERFIL_CH4_COMPOSTAGEM_MINHOCAS /= PERFIL_CH4_COMPOSTAGEM_MINHOCAS.sum()

PERFIL_N2O_COMPOSTAGEM_MINHOCAS = np.array([0.15, 0.10, 0.20, 0.05, 0.03, 0.03, 0.03, 0.04, 0.05, 0.06, 
                            0.08, 0.09, 0.10, 0.08, 0.07, 0.06, 0.05, 0.04, 0.03, 0.02, 
                            0.01, 0.01, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 
                            0.002, 0.002, 0.002, 0.002, 0.002, 0.001, 0.001, 0.001, 0.001, 0.001, 
                            0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001])
PERFIL_N2O_COMPOSTAGEM_MINHOCAS /= PERFIL_N2O_COMPOSTAGEM_MINHOCAS.sum()

# =============================================================================
# SIMULA√á√ÉO DETALHADA - APENAS COMPOSTAGEM COM MINHOCAS
# =============================================================================

if st.session_state.get('run_simulation', False):
    st.header("üìä Resultados Detalhados da Simula√ß√£o - Compostagem com Minhocas")
    
    # C√°lculos principais
    total_evitado_compostagem_minhocas = emiss√µes_evitadas_ano * anos_simulacao
    
    # Obter pre√ßo do carbono
    preco_carbono = st.session_state.preco_carbono
    moeda = st.session_state.moeda_carbono
    taxa_cambio = st.session_state.taxa_cambio
    fonte_cotacao = st.session_state.fonte_cotacao
    
    # Calcular valores financeiros
    valor_compostagem_minhocas_eur = calcular_valor_creditos(total_evitado_compostagem_minhocas, preco_carbono, moeda)
    valor_compostagem_minhocas_brl = calcular_valor_creditos(total_evitado_compostagem_minhocas, preco_carbono, "R$", taxa_cambio)
    
    # SE√á√ÉO: VALOR FINANCEIRO
    st.subheader("üí∞ Valor Financeiro das Emiss√µes Evitadas")
    
    # Euros
    col1, col2 = st.columns(2)
    with col1:
        st.metric(
            f"Pre√ßo Carbono (Euro)", 
            f"{moeda} {formatar_brasil(preco_carbono)}/tCO‚ÇÇeq",
            help=f"Fonte: {fonte_cotacao}"
        )
    with col2:
        st.metric(
            "Valor Cr√©ditos (Euro)", 
            f"{moeda} {formatar_brasil(valor_compostagem_minhocas_eur)}",
            help=f"Baseado em {formatar_brasil(total_evitado_compostagem_minhocas)} tCO‚ÇÇeq evitadas"
        )
    
    # Reais
    col1, col2 = st.columns(2)
    with col1:
        st.metric(
            f"Pre√ßo Carbono (R$)", 
            f"R$ {formatar_brasil(preco_carbono * taxa_cambio)}/tCO‚ÇÇeq",
            help="Pre√ßo do carbono convertido para Reais"
        )
    with col2:
        st.metric(
            "Valor Cr√©ditos (R$)", 
            f"R$ {formatar_brasil(valor_compostagem_minhocas_brl)}",
            help=f"Baseado em {formatar_brasil(total_evitado_compostagem_minhocas)} tCO‚ÇÇeq evitadas"
        )

    # RESUMO DO SISTEMA
    st.subheader("üè´ Resumo do Sistema de Compostagem com Minhocas")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "Capacidade do Sistema",
            f"{formatar_brasil(residuo_anual_ton, 1)} ton/ano",
            f"{num_reatores} reatores de {capacidade_reator}L"
        )
    
    with col2:
        st.metric(
            "Emiss√µes Evitadas/Ano",
            f"{formatar_brasil(emiss√µes_evitadas_ano)} tCO‚ÇÇeq",
            f"Fator: {fator_emissao} kg CO‚ÇÇeq/kg"
        )
    
    with col3:
        st.metric(
            "Total Evitado",
            f"{formatar_brasil(total_evitado_compostagem_minhocas)} tCO‚ÇÇeq",
            f"{anos_simulacao} anos"
        )
    
    with col4:
        st.metric(
            "Valor Financeiro Total",
            f"R$ {formatar_brasil(valor_compostagem_minhocas_brl)}",
            f"{formatar_brasil(total_evitado_compostagem_minhocas)} tCO‚ÇÇeq"
        )

    # DETALHAMENTO DOS C√ÅLCULOS
    st.subheader("üßÆ Detalhamento dos C√°lculos - Compostagem com Minhocas")
    
    with st.expander("üìã M√©todos de C√°lculo"):
        st.markdown(f"""
        **C√°lculo da Capacidade do Sistema:**
        ```
        Capacidade por ciclo = Capacidade reator √ó N¬∞ reatores √ó Densidade
                            = {capacidade_reator} L √ó {num_reatores} √ó {densidade_residuo} kg/L
                            = {formatar_brasil(capacidade_ciclo_kg, 1)} kg/ciclo
        
        Res√≠duo anual = Capacidade por ciclo √ó Ciclos/ano
                     = {formatar_brasil(capacidade_ciclo_kg, 1)} kg √ó {ciclos_ano}
                     = {formatar_brasil(residuo_anual_kg, 0)} kg/ano
                     = {formatar_brasil(residuo_anual_ton, 1)} ton/ano
        ```
        
        **C√°lculo das Emiss√µes Evitadas:**
        ```
        Emiss√µes evitadas/ano = Res√≠duo anual √ó Fator emiss√£o √∑ 1000
                             = {formatar_brasil(residuo_anual_kg, 0)} kg √ó {fator_emissao} kg CO‚ÇÇeq/kg √∑ 1000
                             = {formatar_brasil(emiss√µes_evitadas_ano)} tCO‚ÇÇeq/ano
        
        Total evitado = Emiss√µes evitadas/ano √ó Anos simula√ß√£o
                     = {formatar_brasil(emiss√µes_evitadas_ano)} tCO‚ÇÇeq/ano √ó {anos_simulacao} anos
                     = {formatar_brasil(total_evitado_compostagem_minhocas)} tCO‚ÇÇeq
        ```
        
        **C√°lculo do Valor Financeiro:**
        ```
        Valor (Euro) = Total evitado √ó Pre√ßo carbono
                    = {formatar_brasil(total_evitado_compostagem_minhocas)} tCO‚ÇÇeq √ó {moeda} {formatar_brasil(preco_carbono)}/tCO‚ÇÇeq
                    = {moeda} {formatar_brasil(valor_compostagem_minhocas_eur)}
        
        Valor (R$) = Valor (Euro) √ó Taxa c√¢mbio
                  = {moeda} {formatar_brasil(valor_compostagem_minhocas_eur)} √ó R$ {formatar_brasil(taxa_cambio)}/‚Ç¨
                  = R$ {formatar_brasil(valor_compostagem_minhocas_brl)}
        ```
        
        **üìö Base Cient√≠fica:**
        - **Metodologia:** Compostagem com minhocas (Yang et al. 2017)
        - **Fatores de emiss√£o:** Baseados em estudos com Eisenia fetida
        - **GWP:** IPCC AR6 (20 anos)
        - **Ciclo:** 50 dias (otimizado para minhocas californianas)
        """)
    
    # PROJE√á√ÉO ANUAL
    st.subheader("üìÖ Proje√ß√£o Anual de Resultados")
    
    # Criar proje√ß√£o anual
    projecao_anual = []
    for ano in range(1, anos_simulacao + 1):
        emiss√µes_acumuladas = emiss√µes_evitadas_ano * ano
        valor_eur_acumulado = calcular_valor_creditos(emiss√µes_acumuladas, preco_carbono, "‚Ç¨")
        valor_brl_acumulado = calcular_valor_creditos(emiss√µes_acumuladas, preco_carbono, "R$", taxa_cambio)
        
        projecao_anual.append({
            'Ano': ano,
            'Emiss√µes Evitadas Acumuladas (tCO‚ÇÇeq)': formatar_brasil(emiss√µes_acumuladas, 1),
            'Valor Acumulado (‚Ç¨)': formatar_brasil(valor_eur_acumulado, moeda=True, simbolo_moeda="‚Ç¨"),
            'Valor Acumulado (R$)': formatar_brasil(valor_brl_acumulado, moeda=True, simbolo_moeda="R$")
        })
    
    projecao_df = pd.DataFrame(projecao_anual)
    st.dataframe(projecao_df, use_container_width=True)

else:
    st.info("""
    üí° **Configure o sistema de compostagem na barra lateral e clique em 'Executar Simula√ß√£o Completa' para ver os resultados.**
    
    O simulador calcular√°:
    - Capacidade total do sistema de compostagem com minhocas
    - Emiss√µes de gases de efeito estufa evitadas
    - Valor financeiro dos cr√©ditos de carbono
    - Proje√ß√£o anual de resultados
    
    **üå± Metodologia:** Compostagem com minhocas (Yang et al. 2017)
    """)

# =============================================================================
# INFORMA√á√ïES ADICIONAIS - ATUALIZADA COM COMPOSTAGEM COM MINHOCAS
# =============================================================================

with st.expander("üìö Sobre o Sistema de Compostagem com Minhocas"):
    st.markdown(f"""
    **üéØ Objetivo do Sistema:**
    - Processar res√≠duos org√¢nicos das escolas (frutas, verduras, restaurantes)
    - Produzir fertilizantes naturais (h√∫mus e bio-wash) usando minhocas
    - Gerar cr√©ditos de carbono atrav√©s da compostagem com minhocas
    - Educar alunos sobre sustentabilidade e vermicompostagem
    
    **‚öôÔ∏è Especifica√ß√µes T√©cnicas:**
    - **Reatores:** Caixas de {capacidade_reator}L com tampa
    - **Minhocas:** Eisenia fetida (Californianas)
    - **Substrato:** Serragem + folhas secas
    - **Ciclo:** 50 dias (enchimento + processamento pelas minhocas)
    - **Produtos:** H√∫mus (s√≥lido) + Bio-wash (l√≠quido)
    
    **üìä Capacidade de Processamento:**
    - Cada reator de {capacidade_reator}L processa ~{formatar_brasil(capacidade_ciclo_kg/num_reatores, 1)} kg por ciclo
    - Sistema com {num_reatores} reatores: ~{formatar_brasil(capacidade_ciclo_kg, 1)} kg por ciclo
    - Com {ciclos_ano} ciclos/ano: ~{formatar_brasil(residuo_anual_kg, 0)} kg/ano
    - Emiss√µes evitadas: ~{formatar_brasil(emiss√µes_evitadas_ano)} tCO‚ÇÇeq/ano
    
    **üí∞ Benef√≠cios Financeiros:**
    - Cr√©ditos de carbono comercializ√°veis
    - Redu√ß√£o de custos com fertilizantes
    - Economia na gest√£o de res√≠duos
    - Potencial de receita com produtos da compostagem
    
    **üî¨ Base Cient√≠fica:**
    - **Metodologia:** Yang et al. (2017) - Compostagem com minhocas
    - **Efici√™ncia:** Redu√ß√£o de 80-90% nas emiss√µes vs aterro sanit√°rio
    - **Qualidade:** Produ√ß√£o de fertilizantes org√¢nicos de alta qualidade
    """)

# Rodap√©
st.markdown("---")
st.markdown("""
**üè´ Sistema de Compostagem com Minhocas - Ribeir√£o Preto/SP**  
*Desenvolvido para c√°lculo de cr√©ditos de carbono no contexto educacional*

**üìû Contato:** Secretaria Municipal de Educa√ß√£o - Ribeir√£o Preto  
**üî¨ Metodologia:** Compostagem com minhocas (Yang et al. 2017)
""")
