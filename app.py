import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime, timedelta
import requests
from bs4 import BeautifulSoup
import numpy as np

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Vermicompostagem - Ribeir√£o Preto",
    page_icon="‚ôªÔ∏è",
    layout="wide"
)

st.title("‚ôªÔ∏è Vermicompostagem nas Escolas de Ribeir√£o Preto")
st.markdown("**Monitoramento do sistema de compostagem com minhocas**")

# =============================================================================
# FUN√á√ïES DE COTA√á√ÉO DO CARBONO (DO SEU SCRIPT)
# =============================================================================

def obter_cotacao_carbono_investing():
    try:
        url = "https://www.investing.com/commodities/carbon-emissions"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept-Language': 'pt-BR,pt;q=0.9,en;q=0.8',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Referer': 'https://www.investing.com/'
        }
        
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.content, 'html.parser')
        
        selectores = [
            '[data-test="instrument-price-last"]',
            '.text-2xl',
            '.last-price-value',
            '.instrument-price-last',
            '.pid-1062510-last',
            '.float_lang_base_1',
            '.top.bold.inlineblock',
            '#last_last'
        ]
        
        preco = None
        fonte = "Investing.com"
        
        for seletor in selectores:
            try:
                elemento = soup.select_one(seletor)
                if elemento:
                    texto_preco = elemento.text.strip().replace(',', '')
                    texto_preco = ''.join(c for c in texto_preco if c.isdigit() or c == '.')
                    if texto_preco:
                        preco = float(texto_preco)
                        break
            except (ValueError, AttributeError):
                continue
        
        if preco is not None:
            return preco, "‚Ç¨", "Carbon Emissions Future", True, fonte
        
        import re
        padroes_preco = [
            r'"last":"([\d,]+)"',
            r'data-last="([\d,]+)"',
            r'last_price["\']?:\s*["\']?([\d,]+)',
            r'value["\']?:\s*["\']?([\d,]+)'
        ]
        
        html_texto = str(soup)
        for padrao in padroes_preco:
            matches = re.findall(padrao, html_texto)
            for match in matches:
                try:
                    preco_texto = match.replace(',', '')
                    preco = float(preco_texto)
                    if 50 < preco < 200:
                        return preco, "‚Ç¨", "Carbon Emissions Future", True, fonte
                except ValueError:
                    continue
                    
        return None, None, None, False, fonte
        
    except Exception as e:
        return None, None, None, False, f"Investing.com - Erro: {str(e)}"

def obter_cotacao_carbono():
    preco, moeda, contrato_info, sucesso, fonte = obter_cotacao_carbono_investing()
    
    if sucesso:
        return preco, moeda, f"{contrato_info}", True, fonte
    
    return 85.50, "‚Ç¨", "Carbon Emissions (Refer√™ncia)", False, "Refer√™ncia"

def obter_cotacao_euro_real():
    try:
        url = "https://economia.awesomeapi.com.br/last/EUR-BRL"
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            data = response.json()
            cotacao = float(data['EURBRL']['bid'])
            return cotacao, "R$", True, "AwesomeAPI"
    except:
        pass
    
    try:
        url = "https://api.exchangerate-api.com/v4/latest/EUR"
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            data = response.json()
            cotacao = data['rates']['BRL']
            return cotacao, "R$", True, "ExchangeRate-API"
    except:
        pass
    
    return 5.50, "R$", False, "Refer√™ncia"

def calcular_valor_creditos(emissoes_evitadas_tco2eq, preco_carbono_por_tonelada, moeda, taxa_cambio=1):
    valor_total = emissoes_evitadas_tco2eq * preco_carbono_por_tonelada * taxa_cambio
    return valor_total

def exibir_cotacao_carbono():
    st.sidebar.header("üí∞ Mercado de Carbono")
    
    if not st.session_state.get('cotacao_carregada', False):
        st.session_state.mostrar_atualizacao = True
        st.session_state.cotacao_carregada = True
    
    col1, col2 = st.sidebar.columns([3, 1])
    with col1:
        if st.button("üîÑ Atualizar Cota√ß√µes", key="atualizar_cotacoes"):
            st.session_state.cotacao_atualizada = True
            st.session_state.mostrar_atualizacao = True
    
    if st.session_state.get('mostrar_atualizacao', False):
        st.sidebar.info("üîÑ Atualizando cota√ß√µes...")
        
        preco_carbono, moeda, contrato_info, sucesso_carbono, fonte_carbono = obter_cotacao_carbono()
        preco_euro, moeda_real, sucesso_euro, fonte_euro = obter_cotacao_euro_real()
        
        st.session_state.preco_carbono = preco_carbono
        st.session_state.moeda_carbono = moeda
        st.session_state.taxa_cambio = preco_euro
        st.session_state.moeda_real = moeda_real
        st.session_state.fonte_cotacao = fonte_carbono
        
        st.session_state.mostrar_atualizacao = False
        st.session_state.cotacao_atualizada = False
        
        st.rerun()

    st.sidebar.metric(
        label=f"Pre√ßo do Carbono (tCO‚ÇÇeq)",
        value=f"{st.session_state.moeda_carbono} {st.session_state.preco_carbono:.2f}",
        help=f"Fonte: {st.session_state.fonte_cotacao}"
    )
    
    st.sidebar.metric(
        label="Euro (EUR/BRL)",
        value=f"{st.session_state.moeda_real} {st.session_state.taxa_cambio:.2f}",
        help="Cota√ß√£o do Euro em Reais Brasileiros"
    )
    
    preco_carbono_reais = st.session_state.preco_carbono * st.session_state.taxa_cambio
    
    st.sidebar.metric(
        label=f"Carbono em Reais (tCO‚ÇÇeq)",
        value=f"R$ {preco_carbono_reais:.2f}",
        help="Pre√ßo do carbono convertido para Reais Brasileiros"
    )

# =============================================================================
# INICIALIZA√á√ÉO DA SESSION STATE
# =============================================================================

def inicializar_session_state():
    if 'preco_carbono' not in st.session_state:
        preco_carbono, moeda, contrato_info, sucesso, fonte = obter_cotacao_carbono()
        st.session_state.preco_carbono = preco_carbono
        st.session_state.moeda_carbono = moeda
        st.session_state.fonte_cotacao = fonte
        
    if 'taxa_cambio' not in st.session_state:
        preco_euro, moeda_real, sucesso_euro, fonte_euro = obter_cotacao_euro_real()
        st.session_state.taxa_cambio = preco_euro
        st.session_state.moeda_real = moeda_real
        
    if 'moeda_real' not in st.session_state:
        st.session_state.moeda_real = "R$"
    if 'cotacao_atualizada' not in st.session_state:
        st.session_state.cotacao_atualizada = False
    if 'mostrar_atualizacao' not in st.session_state:
        st.session_state.mostrar_atualizacao = False
    if 'cotacao_carregada' not in st.session_state:
        st.session_state.cotacao_carregada = False

inicializar_session_state()

# =============================================================================
# FUN√á√ïES DE C√ÅLCULO PARA REATORES
# =============================================================================

def calcular_residuo_processado(capacidade_reator_litros, num_reatores, ciclos_ano, densidade_kg_l=0.5):
    """
    Calcula a quantidade total de res√≠duo processado por ano
    
    Args:
        capacidade_reator_litros: Capacidade de cada reator em litros
        num_reatores: N√∫mero de reatores no sistema
        ciclos_ano: N√∫mero de ciclos completos por ano
        densidade_kg_l: Densidade do res√≠duo (kg/litro) - padr√£o 0.5 kg/L para res√≠duos √∫midos
    
    Returns:
        residuo_total_kg: Total de res√≠duo processado por ano em kg
    """
    residuo_por_ciclo_kg = capacidade_reator_litros * densidade_kg_l * num_reatores
    residuo_total_kg = residuo_por_ciclo_kg * ciclos_ano
    return residuo_total_kg

def calcular_emissoes_evitadas(residuo_total_kg, fator_emissao_kgco2eq_kg=0.8):
    """
    Calcula emiss√µes evitadas baseado na quantidade de res√≠duo processado
    
    Args:
        residuo_total_kg: Total de res√≠duo processado por ano em kg
        fator_emissao_kgco2eq_kg: Fator de emiss√£o evitada (kg CO‚ÇÇeq/kg res√≠duo)
                                  Padr√£o: 0.8 kg CO‚ÇÇeq/kg res√≠duo (baseado em literatura)
    
    Returns:
        emiss√µes_evitadas_tco2eq: Emiss√µes evitadas em tCO‚ÇÇeq/ano
    """
    emiss√µes_evitadas_kgco2eq = residuo_total_kg * fator_emissao_kgco2eq_kg
    emiss√µes_evitadas_tco2eq = emiss√µes_evitadas_kgco2eq / 1000
    return emiss√µes_evitadas_tco2eq

# =============================================================================
# INTERFACE PRINCIPAL
# =============================================================================

# Exibir cota√ß√£o de carbono
exibir_cotacao_carbono()

# Sidebar com par√¢metros dos reatores
with st.sidebar:
    st.header("‚öôÔ∏è Sistema de Reatores")
    
    # Par√¢metros dos reatores
    capacidade_reator = st.slider(
        "Capacidade de cada reator (litros)",
        min_value=50,
        max_value=500,
        value=100,
        step=10,
        help="Capacidade volum√©trica de cada reator individual"
    )
    
    num_reatores = st.slider(
        "N√∫mero de reatores no sistema",
        min_value=1,
        max_value=10,
        value=3,
        step=1,
        help="Quantidade total de reatores em opera√ß√£o"
    )
    
    ciclos_ano = st.slider(
        "Ciclos completos por ano",
        min_value=1,
        max_value=12,
        value=6,
        step=1,
        help="N√∫mero de vezes que os reatores s√£o completamente processados por ano"
    )
    
    densidade_residuo = st.slider(
        "Densidade do res√≠duo (kg/litro)",
        min_value=0.3,
        max_value=0.8,
        value=0.5,
        step=0.05,
        help="Densidade m√©dia dos res√≠duos de compostagem"
    )
    
    # C√°lculo autom√°tico
    residuo_anual_kg = calcular_residuo_processado(capacidade_reator, num_reatores, ciclos_ano, densidade_residuo)
    residuo_anual_ton = residuo_anual_kg / 1000
    
    st.info(f"**Res√≠duo processado:** {residuo_anual_ton:.1f} ton/ano")
    
    # Fator de emiss√£o (configur√°vel)
    st.subheader("üå± Fator de Emiss√£o")
    fator_emissao = st.slider(
        "Fator de emiss√£o evitada (kg CO‚ÇÇeq/kg res√≠duo)",
        min_value=0.5,
        max_value=1.5,
        value=0.8,
        step=0.1,
        help="Quanto de emiss√£o √© evitada por kg de res√≠duo compostado vs aterro"
    )
    
    # C√°lculo das emiss√µes evitadas
    emiss√µes_evitadas_ano = calcular_emissoes_evitadas(residuo_anual_kg, fator_emissao)
    
    st.success(f"**Emiss√µes evitadas:** {emiss√µes_evitadas_ano:.2f} tCO‚ÇÇeq/ano")

# =============================================================================
# C√ÅLCULO FINANCEIRO
# =============================================================================

# Par√¢metros de simula√ß√£o
st.sidebar.header("üìÖ Proje√ß√£o Temporal")
anos_projecao = st.sidebar.slider("Anos de proje√ß√£o", 1, 20, 10, 1)

# C√°lculos principais
emissoes_totais_evitadas = emiss√µes_evitadas_ano * anos_projecao

# Valores financeiros
preco_carbono_eur = st.session_state.preco_carbono
taxa_cambio = st.session_state.taxa_cambio

valor_eur = calcular_valor_creditos(emissoes_totais_evitadas, preco_carbono_eur, "‚Ç¨")
valor_brl = calcular_valor_creditos(emissoes_totais_evitadas, preco_carbono_eur, "R$", taxa_cambio)

# =============================================================================
# EXIBI√á√ÉO DOS RESULTADOS
# =============================================================================

st.header("üí∞ Proje√ß√£o Financeira de Cr√©ditos de Carbono")

# M√©tricas principais
col1, col2, col3 = st.columns(3)

with col1:
    st.metric(
        "Emiss√µes Evitadas Totais",
        f"{emissoes_totais_evitadas:.1f} tCO‚ÇÇeq",
        f"Em {anos_projecao} anos"
    )

with col2:
    st.metric(
        "Valor em Euros",
        f"‚Ç¨ {valor_eur:,.2f}",
        f"@ ‚Ç¨{preco_carbono_eur:.2f}/tCO‚ÇÇeq"
    )

with col3:
    st.metric(
        "Valor em Reais", 
        f"R$ {valor_brl:,.2f}",
        f"@ R${preco_carbono_eur * taxa_cambio:.2f}/tCO‚ÇÇeq"
    )

# Detalhamento do c√°lculo
st.subheader("üìä Detalhamento do C√°lculo")

detalhes_df = pd.DataFrame({
    'Par√¢metro': [
        'Capacidade por reator (L)',
        'N√∫mero de reatores',
        'Ciclos por ano',
        'Densidade res√≠duo (kg/L)',
        'Res√≠duo processado/ano (ton)',
        'Fator emiss√£o (kg CO‚ÇÇeq/kg)',
        'Emiss√µes evitadas/ano (tCO‚ÇÇeq)',
        'Per√≠odo de projeto (anos)',
        'Pre√ßo carbono (‚Ç¨/tCO‚ÇÇeq)',
        'Taxa c√¢mbio (EUR/BRL)'
    ],
    'Valor': [
        capacidade_reator,
        num_reatores,
        ciclos_ano,
        densidade_residuo,
        residuo_anual_ton,
        fator_emissao,
        emiss√µes_evitadas_ano,
        anos_projecao,
        preco_carbono_eur,
        taxa_cambio
    ],
    'Unidade': [
        'litros',
        'unidades',
        'ciclos/ano',
        'kg/L',
        'ton/ano',
        'kg CO‚ÇÇeq/kg',
        'tCO‚ÇÇeq/ano',
        'anos',
        '‚Ç¨/tCO‚ÇÇeq',
        'R$/‚Ç¨'
    ]
})

st.dataframe(detalhes_df, use_container_width=True)

# Proje√ß√£o anual
st.subheader("üìà Proje√ß√£o Anual de Receita")

projecao_anual = []
for ano in range(1, anos_projecao + 1):
    emissoes_acumuladas = emiss√µes_evitadas_ano * ano
    valor_eur_acumulado = calcular_valor_creditos(emissoes_acumuladas, preco_carbono_eur, "‚Ç¨")
    valor_brl_acumulado = calcular_valor_creditos(emissoes_acumuladas, preco_carbono_eur, "R$", taxa_cambio)
    
    projecao_anual.append({
        'Ano': ano,
        'Emiss√µes Evitadas Acumuladas (tCO‚ÇÇeq)': emissoes_acumuladas,
        'Valor Acumulado (‚Ç¨)': valor_eur_acumulado,
        'Valor Acumulado (R$)': valor_brl_acumulado
    })

projecao_df = pd.DataFrame(projecao_anual)
st.dataframe(projecao_df, use_container_width=True)

# Gr√°fico de proje√ß√£o
fig = px.line(
    projecao_df, 
    x='Ano', 
    y='Valor Acumulado (R$)',
    title='Proje√ß√£o de Receita com Cr√©ditos de Carbono',
    markers=True
)
fig.update_layout(
    yaxis_title='Valor Acumulado (R$)',
    xaxis_title='Ano'
)
st.plotly_chart(fig, use_container_width=True)

# =============================================================================
# INFORMA√á√ïES ADICIONAIS
# =============================================================================

with st.expander("‚ÑπÔ∏è Sobre os C√°lculos"):
    st.markdown(f"""
    **üßÆ Metodologia de C√°lculo:**
    
    **1. Res√≠duo Processado:**
    ```
    Res√≠duo Anual (kg) = Capacidade Reator (L) √ó N¬∞ Reatores √ó Densidade (kg/L) √ó Ciclos/Ano
                       = {capacidade_reator} L √ó {num_reatores} √ó {densidade_residuo} kg/L √ó {ciclos_ano}
                       = {residuo_anual_kg:,.0f} kg/ano = {residuo_anual_ton:.1f} ton/ano
    ```
    
    **2. Emiss√µes Evitadas:**
    ```
    Emiss√µes Evitadas (tCO‚ÇÇeq/ano) = Res√≠duo Anual (kg) √ó Fator Emiss√£o (kg CO‚ÇÇeq/kg) √∑ 1000
                                   = {residuo_anual_kg:,.0f} kg √ó {fator_emissao} kg CO‚ÇÇeq/kg √∑ 1000
                                   = {emiss√µes_evitadas_ano:.2f} tCO‚ÇÇeq/ano
    ```
    
    **3. Valor dos Cr√©ditos:**
    ```
    Valor (‚Ç¨) = Emiss√µes Totais Evitadas (tCO‚ÇÇeq) √ó Pre√ßo Carbono (‚Ç¨/tCO‚ÇÇeq)
              = {emissoes_totais_evitadas:.1f} tCO‚ÇÇeq √ó ‚Ç¨{preco_carbono_eur:.2f}/tCO‚ÇÇeq
              = ‚Ç¨{valor_eur:,.2f}
              
    Valor (R$) = Valor (‚Ç¨) √ó Taxa C√¢mbio (R$/‚Ç¨)
               = ‚Ç¨{valor_eur:,.2f} √ó R${taxa_cambio:.2f}/‚Ç¨
               = R${valor_brl:,.2f}
    ```
    
    **üìö Refer√™ncias:**
    - Fator de emiss√£o baseado em IPCC e metodologias de MDL
    - Pre√ßo do carbono baseado em EU ETS (mercado europeu)
    - Densidade t√≠pica de res√≠duos org√¢nicos: 0.4-0.6 kg/L
    """)

# =============================================================================
# DOWNLOAD DOS RESULTADOS
# =============================================================================

# Criar DataFrame para download
download_df = pd.DataFrame({
    'Ano': list(range(1, anos_projecao + 1)),
    'Emiss√µes_Evitadas_tCO2eq': [emiss√µes_evitadas_ano * ano for ano in range(1, anos_projecao + 1)],
    'Valor_EUR': [calcular_valor_creditos(emiss√µes_evitadas_ano * ano, preco_carbono_eur, "‚Ç¨") for ano in range(1, anos_projecao + 1)],
    'Valor_BRL': [calcular_valor_creditos(emiss√µes_evitadas_ano * ano, preco_carbono_eur, "R$", taxa_cambio) for ano in range(1, anos_projecao + 1)]
})

# Bot√£o de download
csv = download_df.to_csv(index=False)
st.download_button(
    label="üì• Download da Proje√ß√£o (CSV)",
    data=csv,
    file_name=f"projecao_creditos_carbono_{datetime.now().strftime('%Y%m%d')}.csv",
    mime="text/csv"
)

st.markdown("---")
st.markdown("""
**‚ôªÔ∏è Sistema de Vermicompostagem - Ribeir√£o Preto/SP**  
*C√°lculo de cr√©ditos de carbono baseado na capacidade dos reatores e processamento de res√≠duos*
""")
