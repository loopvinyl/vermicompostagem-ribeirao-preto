import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import requests
from bs4 import BeautifulSoup
import warnings
warnings.filterwarnings("ignore")

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Compostagem Escolar - Ribeir√£o Preto",
    page_icon="‚ôªÔ∏è",
    layout="wide"
)

# T√≠tulo principal
st.title("‚ôªÔ∏è Sistema de Compostagem com Minhocas - Escolas")
st.markdown("""
**Simulador de Cr√©ditos de Carbono para escolas que preparam alimenta√ß√£o:** 
**c√°lculo baseado no processamento de res√≠duos de restaurantes escolares como vegetais, frutas e borra de caf√©**
""")

# =============================================================================
# INICIALIZA√á√ÉO DO SESSION STATE
# =============================================================================

def inicializar_session_state():
    """Inicializa todas as vari√°veis de sess√£o necess√°rias"""
    if 'preco_carbono' not in st.session_state:
        st.session_state.preco_carbono = 85.50
    if 'moeda_carbono' not in st.session_state:
        st.session_state.moeda_carbono = "‚Ç¨"
    if 'fonte_cotacao' not in st.session_state:
        st.session_state.fonte_cotacao = "Refer√™ncia"
    if 'taxa_cambio' not in st.session_state:
        st.session_state.taxa_cambio = 5.50
    if 'moeda_real' not in st.session_state:
        st.session_state.moeda_real = "R$"
    if 'cotacao_atualizada' not in st.session_state:
        st.session_state.cotacao_atualizada = False
    if 'mostrar_atualizacao' not in st.session_state:
        st.session_state.mostrar_atualizacao = False
    if 'cotacao_carregada' not in st.session_state:
        st.session_state.cotacao_carregada = False
    if 'run_simulation' not in st.session_state:
        st.session_state.run_simulation = False

# =============================================================================
# FUN√á√ÉO DE FORMATA√á√ÉO BRASILEIRA
# =============================================================================

def formatar_brasil(numero, casas_decimais=2, moeda=False, simbolo_moeda=""):
    """Formata n√∫meros no padr√£o brasileiro"""
    try:
        if numero is None:
            return "0,00"
        
        numero_arredondado = round(float(numero), casas_decimais)
        formatado = f"{numero_arredondado:,.{casas_decimais}f}"
        
        if casas_decimais > 0:
            formatado = formatado.replace(",", "X").replace(".", ",").replace("X", ".")
        else:
            formatado = formatado.replace(",", ".")
        
        if moeda and simbolo_moeda:
            return f"{simbolo_moeda} {formatado}"
        else:
            return formatado
            
    except (ValueError, TypeError):
        return "0,00"

# =============================================================================
# FUN√á√ïES DE COTA√á√ÉO DO CARBONO (MELHORADAS)
# =============================================================================

def obter_cotacao_carbono_investing():
    """Tenta obter a cota√ß√£o real do carbono do Investing.com"""
    try:
        url = "https://www.investing.com/commodities/carbon-emissions"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept-Language': 'pt-BR,pt;q=0.9,en;q=0.8',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Referer': 'https://www.investing.com/'
        }
        
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.content, 'html.parser')
        
        # M√∫ltiplos seletores para tentar encontrar o pre√ßo
        selectores = [
            '[data-test="instrument-price-last"]',
            '.text-2xl',
            '.last-price-value',
            '.instrument-price-last',
            '.pid-1062510-last',
            '.float_lang_base_1',
            '.top.bold.inlineblock',
            '#last_last'
        ]
        
        preco = None
        fonte = "Investing.com"
        
        for seletor in selectores:
            try:
                elemento = soup.select_one(seletor)
                if elemento:
                    texto_preco = elemento.text.strip().replace(',', '')
                    # Manter apenas n√∫meros e ponto decimal
                    texto_preco = ''.join(c for c in texto_preco if c.isdigit() or c == '.')
                    if texto_preco:
                        preco = float(texto_preco)
                        # Validar que √© um pre√ßo razo√°vel
                        if 50 < preco < 200:
                            break
            except (ValueError, AttributeError):
                continue
        
        if preco is not None:
            return preco, "‚Ç¨", "Carbon Emissions Future", True, fonte
        
        # Tentativa com regex como fallback
        import re
        padroes_preco = [
            r'"last":"([\d,]+)"',
            r'data-last="([\d,]+)"',
            r'last_price["\']?:\s*["\']?([\d,]+)',
            r'value["\']?:\s*["\']?([\d,]+)'
        ]
        
        html_texto = str(soup)
        for padrao in padroes_preco:
            matches = re.findall(padrao, html_texto)
            for match in matches:
                try:
                    preco_texto = match.replace(',', '')
                    preco = float(preco_texto)
                    if 50 < preco < 200:  # Faixa razo√°vel para carbono
                        return preco, "‚Ç¨", "Carbon Emissions Future", True, fonte
                except ValueError:
                    continue
                    
        return None, None, None, False, fonte
        
    except Exception as e:
        return None, None, None, False, f"Investing.com - Erro: {str(e)}"

def obter_cotacao_carbono():
    """Obt√©m a cota√ß√£o do carbono com fallback para valores de refer√™ncia"""
    preco, moeda, contrato_info, sucesso, fonte = obter_cotacao_carbono_investing()
    
    if sucesso and preco is not None:
        return preco, moeda, f"{contrato_info}", True, fonte
    
    # Fallback para valores de refer√™ncia
    return 85.50, "‚Ç¨", "Carbon Emissions (Refer√™ncia)", False, "Refer√™ncia"

def obter_cotacao_euro_real():
    """Obt√©m a cota√ß√£o do Euro em Reais com m√∫ltiplas fontes"""
    try:
        url = "https://economia.awesomeapi.com.br/last/EUR-BRL"
        response = requests.get(url, timeout=8)
        if response.status_code == 200:
            data = response.json()
            cotacao = float(data['EURBRL']['bid'])
            return cotacao, "R$", True, "AwesomeAPI"
    except:
        pass
    
    try:
        url = "https://api.exchangerate-api.com/v4/latest/EUR"
        response = requests.get(url, timeout=8)
        if response.status_code == 200:
            data = response.json()
            cotacao = data['rates']['BRL']
            return cotacao, "R$", True, "ExchangeRate-API"
    except:
        pass
    
    # Fallback para valor de refer√™ncia
    return 5.50, "R$", False, "Refer√™ncia"

def calcular_valor_creditos(emissoes_evitadas_tco2eq, preco_carbono_por_tonelada, taxa_cambio=1):
    """Calcula o valor financeiro das emiss√µes evitadas"""
    return emissoes_evitadas_tco2eq * preco_carbono_por_tonelada * taxa_cambio

def exibir_painel_cotacoes():
    """Exibe o painel de cota√ß√µes atualizado na sidebar"""
    
    st.sidebar.header("üí∞ Mercado de Carbono")
    
    # Inicializar estado se necess√°rio
    if not st.session_state.get('cotacao_carregada', False):
        st.session_state.mostrar_atualizacao = True
        st.session_state.cotacao_carregada = True
    
    # Bot√£o de atualiza√ß√£o
    col1, col2 = st.sidebar.columns([3, 1])
    with col1:
        if st.button("üîÑ Atualizar Cota√ß√µes", key="atualizar_cotacoes", use_container_width=True):
            st.session_state.cotacao_atualizada = True
            st.session_state.mostrar_atualizacao = True
    
    # Processar atualiza√ß√£o se necess√°ria
    if st.session_state.get('mostrar_atualizacao', False):
        with st.sidebar:
            with st.spinner("üîÑ Atualizando cota√ß√µes..."):
                preco_carbono, moeda, contrato_info, sucesso_carbono, fonte_carbono = obter_cotacao_carbono()
                preco_euro, moeda_real, sucesso_euro, fonte_euro = obter_cotacao_euro_real()
                
                st.session_state.preco_carbono = preco_carbono
                st.session_state.moeda_carbono = moeda
                st.session_state.taxa_cambio = preco_euro
                st.session_state.moeda_real = moeda_real
                st.session_state.fonte_cotacao = fonte_carbono
                
                st.session_state.mostrar_atualizacao = False
                st.session_state.cotacao_atualizada = False

    # Exibir m√©tricas formatadas
    preco_carbono_formatado = formatar_brasil(st.session_state.preco_carbono, 2)
    taxa_cambio_formatada = formatar_brasil(st.session_state.taxa_cambio, 2)
    preco_carbono_reais = st.session_state.preco_carbono * st.session_state.taxa_cambio
    preco_carbono_reais_formatado = formatar_brasil(preco_carbono_reais, 2)

    st.sidebar.metric(
        label="Pre√ßo do Carbono (tCO‚ÇÇeq)",
        value=f"{st.session_state.moeda_carbono} {preco_carbono_formatado}",
        help=f"Fonte: {st.session_state.fonte_cotacao}"
    )
    
    st.sidebar.metric(
        label="Euro (EUR/BRL)",
        value=f"{st.session_state.moeda_real} {taxa_cambio_formatada}",
        help="Cota√ß√£o do Euro em Reais"
    )
    
    st.sidebar.metric(
        label="Carbono em Reais (tCO‚ÇÇeq)",
        value=f"R$ {preco_carbono_reais_formatado}",
        help="Pre√ßo do carbono convertido para Reais"
    )
    
    # Informa√ß√µes adicionais
    with st.sidebar.expander("‚ÑπÔ∏è Sobre o Mercado"):
        st.markdown(f"""
        **üìä Cota√ß√µes Atuais:**
        - **Carbono:** {st.session_state.moeda_carbono} {preco_carbono_formatado}/tCO‚ÇÇeq
        - **C√¢mbio:** 1 Euro = {st.session_state.moeda_real} {taxa_cambio_formatada}
        - **Carbono em R$:** R$ {preco_carbono_reais_formatado}/tCO‚ÇÇeq
        
        **üåç Mercado de Refer√™ncia:**
        - European Union Allowances (EUA)
        - European Emissions Trading System (EU ETS)
        - Contratos futuros de carbono
        
        **üîÑ Atualiza√ß√£o:**
        - Cota√ß√µes atualizadas sob demanda
        - Clique no bot√£o para valores mais recentes
        - Em caso de falha, usa valores de refer√™ncia
        """)

# =============================================================================
# CONFIGURA√á√ÉO DO SISTEMA
# =============================================================================

# Inicializar session state primeiro
inicializar_session_state()

# Exibir painel de cota√ß√µes na sidebar
exibir_painel_cotacoes()

# Configura√ß√£o do sistema na sidebar
with st.sidebar:
    st.header("‚öôÔ∏è Configura√ß√£o do Sistema")
    
    # Sistema de reatores
    st.subheader("üì¶ Reatores de Compostagem")
    
    capacidade_reator = st.slider(
        "Capacidade de cada reator (litros)",
        min_value=20,
        max_value=100,
        value=30,
        step=5,
        help="Caixas padr√£o de 30L para coleta de biofertilizante"
    )
    
    num_reatores = st.slider(
        "N√∫mero de reatores no sistema",
        min_value=1,
        max_value=10,
        value=3,
        step=1,
        help="Cada reator processa res√≠duos por 50 dias"
    )
    
    ciclos_ano = st.slider(
        "Ciclos completos por ano",
        min_value=1,
        max_value=12,
        value=6,
        step=1,
        help="N√∫mero de vezes que os reatores s√£o processados por ano"
    )
    
    # C√°lculos autom√°ticos
    densidade_residuo = 0.5  # kg/L - fixo para res√≠duos escolares
    capacidade_ciclo_kg = capacidade_reator * densidade_residuo * num_reatores
    residuo_anual_kg = capacidade_ciclo_kg * ciclos_ano
    residuo_anual_ton = residuo_anual_kg / 1000
    residuos_kg_dia = residuo_anual_kg / 365
    
    st.info(f"""
    **üìä Capacidade do Sistema:**
    - **Por ciclo:** {formatar_brasil(capacidade_ciclo_kg, 1)} kg
    - **Por ano:** {formatar_brasil(residuo_anual_ton, 1)} toneladas
    - **Res√≠duos/dia:** {formatar_brasil(residuos_kg_dia, 1)} kg
    """)
    
    # Per√≠odo de simula√ß√£o
    st.subheader("üìÖ Per√≠odo de Projeto")
    anos_simulacao = st.selectbox(
        "Dura√ß√£o do projeto",
        options=[4, 8, 12, 16, 20],
        index=0,  # Padr√£o 4 anos
        help="Per√≠odo t√≠pico para projetos escolares"
    )
    
    if st.button("üöÄ Calcular Cr√©ditos de Carbono", type="primary", use_container_width=True):
        st.session_state.run_simulation = True

# =============================================================================
# INFORMA√á√ïES DO SISTEMA
# =============================================================================

st.header("üè´ Sistema de Compostagem Escolar")

col1, col2, col3 = st.columns(3)

with col1:
    st.subheader(f"üì¶ Reatores de {capacidade_reator}L")
    st.markdown(f"""
    - **Material:** Pl√°stico resistente
    - **Fun√ß√£o:** Processar res√≠duos + coletar biofertilizante
    - **Capacidade:** {formatar_brasil(capacidade_ciclo_kg/num_reatores, 1)} kg/reator
    - **Componentes:**
      ‚Ä¢ Minhocas Californianas
      ‚Ä¢ Substrato inicial  
      ‚Ä¢ Res√≠duos org√¢nicos
      ‚Ä¢ Serragem
    """)

with col2:
    st.subheader("üîÑ Opera√ß√£o")
    st.markdown(f"""
    - **Ciclo:** 50 dias
    - **Processo:** Enche ‚Üí Composta ‚Üí Esvazia
    - **Capacidade/ciclo:** {formatar_brasil(capacidade_ciclo_kg, 1)} kg
    - **Ciclos/ano:** {ciclos_ano}
    - **Produtos:**
      ‚Ä¢ H√∫mus (fertilizante)
      ‚Ä¢ Bio-wash (l√≠quido)
    """)

with col3:
    st.subheader("üìà Res√≠duos Processados")
    st.markdown(f"""
    - **Reatores:** {num_reatores} unidades
    - **Processamento/anual:** {formatar_brasil(residuo_anual_ton, 1)} t
    - **Res√≠duos/dia:** {formatar_brasil(residuos_kg_dia, 1)} kg
    - **Tipos de res√≠duos:**
      ‚Ä¢ Frutas e verduras
      ‚Ä¢ Borra de caf√©
      ‚Ä¢ Restos de refeit√≥rio
    """)

# =============================================================================
# PAR√ÇMETROS T√âCNICOS FIXOS
# =============================================================================

# Par√¢metros para c√°lculos de emiss√µes (baseados em literatura cient√≠fica)
T = 25  # Temperatura m√©dia
DOC = 0.15  # Carbono org√¢nico degrad√°vel

# Compostagem com minhocas (Yang et al. 2017)
TOC_COMPOSTAGEM_MINHOCAS = 0.436
TN_COMPOSTAGEM_MINHOCAS = 14.2 / 1000
CH4_C_FRAC_COMPOSTAGEM_MINHOCAS = 0.13 / 100
N2O_N_FRAC_COMPOSTAGEM_MINHOCAS = 0.92 / 100

# GWP (IPCC AR6)
GWP_CH4_20 = 79.7
GWP_N2O_20 = 273

# =============================================================================
# C√ÅLCULOS SIMPLIFICADOS
# =============================================================================

def calcular_emissoes_compostagem_minhocas(residuos_kg_dia_param):
    """Calcula emiss√µes da compostagem com minhocas"""
    # Par√¢metros fixos para res√≠duos escolares
    umidade = 0.85  # 85% - t√≠pico para frutas/verduras
    fracao_ms = 1 - umidade
    
    # C√°lculo baseado em Yang et al. (2017)
    ch4_total_por_lote = residuos_kg_dia_param * (TOC_COMPOSTAGEM_MINHOCAS * CH4_C_FRAC_COMPOSTAGEM_MINHOCAS * (16/12) * fracao_ms)
    n2o_total_por_lote = residuos_kg_dia_param * (TN_COMPOSTAGEM_MINHOCAS * N2O_N_FRAC_COMPOSTAGEM_MINHOCAS * (44/28) * fracao_ms)
    
    # Emiss√µes anuais (simplificado)
    emiss√µes_CH4_ano = ch4_total_por_lote * 365
    emiss√µes_N2O_ano = n2o_total_por_lote * 365
    
    # Converter para tCO‚ÇÇeq
    emiss√µes_tco2eq_ano = (emiss√µes_CH4_ano * GWP_CH4_20 + emiss√µes_N2O_ano * GWP_N2O_20) / 1000
    
    return emiss√µes_tco2eq_ano

def calcular_emissoes_aterro(residuo_anual_kg_param):
    """Calcula emiss√µes do aterro"""
    # Fator de emiss√£o simplificado para aterro (kg CO‚ÇÇeq/kg res√≠duo)
    fator_emissao_aterro = 0.8  # Baseado em IPCC e literatura
    
    emiss√µes_tco2eq_ano = (residuo_anual_kg_param * fator_emissao_aterro) / 1000
    
    return emiss√µes_tco2eq_ano

# =============================================================================
# EXECU√á√ÉO DA SIMULA√á√ÉO
# =============================================================================

if st.session_state.get('run_simulation', False):
    st.header("üí∞ Resultados Financeiros")
    
    # C√°lculos usando os par√¢metros da sidebar
    emissoes_aterro_ano = calcular_emissoes_aterro(residuo_anual_kg)
    emissoes_compostagem_ano = calcular_emissoes_compostagem_minhocas(residuos_kg_dia)
    emissoes_evitadas_ano = emissoes_aterro_ano - emissoes_compostagem_ano
    total_evitado = emissoes_evitadas_ano * anos_simulacao
    
    # Usar cota√ß√µes do session state
    preco_carbono_eur = st.session_state.preco_carbono
    taxa_cambio = st.session_state.taxa_cambio
    preco_carbono_brl = preco_carbono_eur * taxa_cambio
    fonte_cotacao = st.session_state.fonte_cotacao
    
    # Valores financeiros
    valor_eur = calcular_valor_creditos(total_evitado, preco_carbono_eur)
    valor_brl = calcular_valor_creditos(total_evitado, preco_carbono_brl)
    
    # M√©tricas principais
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric(
            "Emiss√µes Evitadas",
            f"{formatar_brasil(total_evitado)} tCO‚ÇÇeq",
            f"{anos_simulacao} anos"
        )
    
    with col2:
        st.metric(
            "Pre√ßo do Carbono", 
            f"R$ {formatar_brasil(preco_carbono_brl)}/tCO‚ÇÇeq",
            f"Fonte: {fonte_cotacao}"
        )
    
    with col3:
        st.metric(
            "Valor dos Cr√©ditos",
            f"R$ {formatar_brasil(valor_brl)}",
            f"{formatar_brasil(total_evitado)} tCO‚ÇÇeq"
        )
    
    # Compara√ß√£o de cen√°rios
    st.subheader("üìä Compara√ß√£o de Cen√°rios")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown(f"""
        **üè≠ Cen√°rio Atual (Aterro):**
        - Emiss√µes anuais: {formatar_brasil(emissoes_aterro_ano)} tCO‚ÇÇeq
        - Emiss√µes totais: {formatar_brasil(emissoes_aterro_ano * anos_simulacao)} tCO‚ÇÇeq
        
        **‚ôªÔ∏è Projeto (Compostagem):**
        - Emiss√µes anuais: {formatar_brasil(emissoes_compostagem_ano)} tCO‚ÇÇeq  
        - Emiss√µes totais: {formatar_brasil(emissoes_compostagem_ano * anos_simulacao)} tCO‚ÇÇeq
        """)
    
    with col2:
        st.markdown(f"""
        **üìà Redu√ß√£o de Emiss√µes:**
        - Redu√ß√£o anual: {formatar_brasil(emissoes_evitadas_ano)} tCO‚ÇÇeq
        - Redu√ß√£o total: {formatar_brasil(total_evitado)} tCO‚ÇÇeq
        
        **üíµ Valor Financeiro:**
        - Em Euros: {formatar_brasil(valor_eur, moeda=True, simbolo_moeda="‚Ç¨")}
        - Em Reais: {formatar_brasil(valor_brl, moeda=True, simbolo_moeda="R$")}
        """)
    
    # Proje√ß√£o anual
    st.subheader("üìÖ Proje√ß√£o Anual")
    
    projecao_data = []
    for ano in range(1, anos_simulacao + 1):
        acumulado_emissoes = emissoes_evitadas_ano * ano
        acumulado_valor_eur = calcular_valor_creditos(acumulado_emissoes, preco_carbono_eur)
        acumulado_valor_brl = calcular_valor_creditos(acumulado_emissoes, preco_carbono_brl)
        
        projecao_data.append({
            'Ano': ano,
            'Emiss√µes Evitadas (tCO‚ÇÇeq)': formatar_brasil(acumulado_emissoes, 1),
            'Valor (‚Ç¨)': formatar_brasil(acumulado_valor_eur, moeda=True, simbolo_moeda="‚Ç¨"),
            'Valor (R$)': formatar_brasil(acumulado_valor_brl, moeda=True, simbolo_moeda="R$")
        })
    
    st.dataframe(pd.DataFrame(projecao_data), use_container_width=True)

else:
    # Tela inicial
    st.info("""
    **üí° Como usar este simulador:**
    
    1. **Configure o sistema** na barra lateral:
       - Escolha a capacidade dos reatores (30L padr√£o)
       - Defina quantos reatores ter√° o sistema  
       - Ajuste os ciclos por ano (6 √© o padr√£o)
    
    2. **Verifique as cota√ß√µes** do mercado de carbono
    
    3. **Selecione a dura√ß√£o** do projeto (4 anos √© o padr√£o)
    
    4. **Clique em "Calcular Cr√©ditos de Carbono"** para ver os resultados
    
    **üå± Sobre os res√≠duos processados:**
    - Frutas e verduras de refeit√≥rios escolares
    - Borra de caf√© das cantinas  
    - Restos de preparo de alimentos
    - Material org√¢nico de hortas escolares
    """)

# =============================================================================
# INFORMA√á√ïES ADICIONAIS
# =============================================================================

with st.expander("üìö Sobre a Metodologia"):
    st.markdown("""
    **üî¨ Base Cient√≠fica:**
    
    **Compostagem com Minhocas (Yang et al. 2017):**
    - Metodologia validada para res√≠duos alimentares
    - Fatores de emiss√£o espec√≠ficos para minhocas californianas
    - Per√≠odo de compostagem: 50 dias
    - Efici√™ncia comprovada na redu√ß√£o de emiss√µes
    
    **Cen√°rio de Refer√™ncia (Aterro):**
    - Baseado em metodologias IPCC
    - Considera emiss√µes de metano e √≥xido nitroso
    - Inclui emiss√µes do processo de decomposi√ß√£o
    
    **üí∞ Mercado de Carbono:**
    - Pre√ßos baseados no European Emissions Trading System (EU ETS)
    - Cota√ß√µes em Euros convertidas para Reais
    - Atualiza√ß√£o sob demanda do usu√°rio
    
    **üíº Aplica√ß√£o Pr√°tica:**
    - Projetos escolares de 4-20 anos
    - Sistemas modulares de 1-10 reatores
    - Capacidade de 20-100 litros por reator
    - Processamento cont√≠nuo ao longo do ano
    
    **üéØ Benef√≠cios Adicionais:**
    - Produ√ß√£o de fertilizante org√¢nico
    - Educa√ß√£o ambiental para alunos
    - Redu√ß√£o de custos com gest√£o de res√≠duos
    - Certifica√ß√£o de cr√©ditos de carbono
    """)

# Rodap√© profissional
st.markdown("---")
st.markdown("""
<div style="text-align: center">
    <h4>üè´ Sistema de Compostagem com Minhocas - Ribeir√£o Preto/SP</h4>
    <p><strong>Gest√£o de Res√≠duos</strong> ‚Ä¢ Desenvolvido para projetos de sustentabilidade escolar</p>
    <p><em>Metodologia: Yang et al. (2017) ‚Ä¢ GWP: IPCC AR6 ‚Ä¢ Mercado: EU ETS</em></p>
</div>
""", unsafe_allow_html=True)
